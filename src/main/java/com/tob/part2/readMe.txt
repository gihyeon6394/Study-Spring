2장 테스트
2.1 UserDaoTest 다시보기
    2.1.1 테스트의 유용성
    2.1.2 UserDaoTest의 특징
        웹을 통한 DAO 테스트 방법의 문제점
        작은 단위의 테스트
        자동수행 테스트 코드
        지속적인 개선과 점진적인 개발을 위한 테스트
    2.1.3 UserDaoTest의 문제점

2.2 UserDaoTest 개선
    2.2.1 테스트 검증의 자동화
    2.2.2 테스트의 효율적인 수행과 결과 관리
        JUnit 테스트로 전환
        테스트 메소드 전환
        검증 코드 전환
        JUnit 테스트 실행

2.3 개발자를 위한 테스팅 프레임워크 JUNIT
    2.3.1 JUnit 테스트 실행 방법
        IDE
        빌드 툴
    2.3.2 테스트 결과의 일관성
        deleteAll()의 getCount() 추가
        deleteAll()과 getCount()의 테스트
        동일한 결과를 보장하는 테스트
    2.3.3. 포괄적인 테스트
        getCount()의 테스트
        addAndGet() 테스트 보완
        get() 예외조건에 대한 테스트
        테스트를 성공시키기 위한 코드의 수정
        포괄적인 테스트
    2.3.4 테스트가 이끄는 개발
        기능 설계를 위한 테스트
        테스트 주도 개발
    2.3.5 테스트 코드 개선
        @Before
        픽스처

2.4 스프링 테슽 적용
    2.4.1 테스트를 위한 애플리케이션 컨텍스트 관리
        스프링 테스트 컨텍스트 프레임워크 적용
        테스트 메소드의 컨텍스트 공유
        테스트 클래스와 컨텍스트 공유
        @Autowired
    2.4.2 DI와 테스트
        테스트 코드에 의한 DI
        테스트를 위한 별도의 DI 설정
        컨테이너 없는 DI 테스트
        DI를 이용한 테스트 방법 선택

2.5 학습 테스트로 배우는 스프링
    2.5.1 학습 테스트의 장점
    2.5.2 학습 테스트 예제
        JUnit 테스트 오브젝트 테스트
        스프링 테스트 컨텍스트 테스트
    2.5.3 버그 테스트

2.6 정리