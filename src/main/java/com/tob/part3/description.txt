3장 템플릿
3.1 다시보는 초난감 DAO
    3.1.1 예외 처리 기능을 갖춘 DAO
        JDBC 수정 기능의 예외처리 코드
        JDBC 조회 기능의 예외 처리

3.2 변하는 것과 변하지 않는 것
    3.2.1 JDBC try/catch/finally 코드의 문제점
    3.2.2 분리와 재사용을 위한 디자인 패턴 적용
        메소드 추출
        템플릿 메소드 패턴의적용
        전략 패턴의 적용
        DI 적용을 위한 클라이언트/컨텍스트 분리

3.3 JDBC 전략 패턴의 최적화
    3.3.1 전략 클래스의 추가 정보
    3.3.2 전략과 클라이언트의 동거
        로컬 클래스
        익명 내부 클래스

3.4 컨텍스트와 DI
    3.4.1 JdbcContext의 분리
        클래스 분리
        빈 의존관계 변경
    3.4.2 JdbcContext의 특별한 DI
        스프링 빈으로 DI
        코드를 이용하는 수동 DI

3.5 템플릿과 콜백
    3.5.1 템플릿/콜백의 동작 원리
        템플릿/콜백의 특징
        JdbcContext에 적용된 템플릿/콜백
    3.5.2 편리한 콜백의 재호라용
        콜백의 분리와 재활용
        콜백과 템플릿의 결합
    3.5.3 템플릿/콜백의 응용
        테스트와 try/catch/finally
        중복의 제거와 템플릿/콜백 설계
        템플릿/콜백의 재설계
        제너릭스를 이용한 콜백 인터페이스

3.6 스프링의 JDBCTemplate
    3.6.1 update()
    3.6.2 queryForInt()
    3.6.3 queryForObject()
    3.6.4 query()
        기능정의와 테스트 작성
        query() 템플릿을 이용하는 getAll() 구현
        테스트 보완
    3.6.5 재사용 가능한 콜백의 분리
        DI를 위한 코드 정리
        중복 제거
        템플릿/콜백 패턴과 UserDao

3.7 정리

